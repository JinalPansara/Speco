openapi: 3.0.0
info:
  title: SpecoApi
  description: Api Implementation
  version: 1.0.0
  contact:
    email: Speco@gmail.com
    name:  Speco
paths:
  /Onboarding:
    get:
      description: Onboarding elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
  /PaymentPlans:
    get:
      description: PaymentPlans elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentplans'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Doctor:
    post:
      description: Doctor elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctor'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
    get:
      description: Doctor elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctor'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Doctor/{doctorid}:
    get:
      description: Doctor elements
      parameters:
        - name: doctorid
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctor'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    put:
      description: Doctor elements
      parameters:
        - name: doctorid
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctor'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
    delete:
      description: Doctor elements
      parameters:
        - name: doctorid
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/doctor'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
    options:
     description: Doctor elements
     parameters:
        - name: doctorid
          required: true
          in: path
          schema:
            type: integer
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,DELETE'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
  /Clinic:
    post:
      description: Clinic elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinic'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        httpMethod: POST
        type: aws_proxy
    get:
      description: Clinic elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinic'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Clinic/{clinicid}:
    get:
      description: Clinic elements
      parameters:
        - name: clinicid
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinic'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    put:
      description: Clinic elements
      parameters:
        - name: clinicid
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinic'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    delete:
      description: Clinic elements
      parameters:
        - name: clinicid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinic'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
    options:
     description: Clinic elements
     parameters:
        - name: clinicid
          required: true
          in: path
          schema:
            type: integer
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,DELETE PUT'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /FAQs:
    get:
      description: Faqs elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQs'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Enquiry:
    post:
      description: enquiry elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enquiry'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri:
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
      
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Appointment:
    post:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    get:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /ClosedAppointment:
    get:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/closedappointment'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /ClosedAppointment/{patientid}:
    put:
      description: Appointment elements
      parameters:
        - name: patientid
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/closedappointment'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    
    options:
     parameters:
        - name: patientid
          required: true
          in: path
          schema:
            type: integer
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /CancelledAppointment:
    get:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cancelledappointment'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
          
        
  /CancelledAppointment/{patientid}:
    put:
      description: cancelled appointment elements
      parameters:
        - name: patientid
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cancelledappointment'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     parameters:
        - name: patientid
          required: true
          in: path
          schema:
            type: integer
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Patient:
    get:
      description: patient elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
        
    post:
      description: patient elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patient'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
      
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
  
  /Payment:
    get:
      description: payment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Consultation:
    get:
      description: consultation elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emr'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
    
    post:
      description: consulation elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emr'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  
        
  /Symptom:
   post:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/symptom'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
   get:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/symptom'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
   options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /SubSymptoms:
   post:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subsymptom'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
   get:
      description: appointment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subsymptom'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
   options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
        
  /Dashboard:
    get:
      description: payment elements
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dashboard'
        '404':
          description: 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errormodel'
      x-amazon-apigateway-integration:
        uri: 
          arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:408647264438:function:Speco_Api/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        credentials: "arn:aws:iam::408647264438:role/lambdaccessrole"
        type: aws_proxy
        
    options:
     responses:
      '200':
        description: Default response
        headers:
          Access-Control-Allow-Headers:
            schema:
             type: string
          Access-Control-Allow-Methods:
           schema:
              type: string
          Access-Control-Allow-Origin:
           schema:
            type: string
     x-amazon-apigateway-integration:
      type: mock
      requestTemplates:
       application/json: |
        {"statusCode" : 200}
      responses:
       default:
        statusCode: 200
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: "'*'"
          method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
          method.response.header.Access-Control-Allow-Origin: "'*'"
        
components:
  schemas:
    onboarding:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              Title:
                type: string
              Description:
                type: string
              image:
                type: string
    paymentplans:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              Title:
                type: string
              Description:
                type: array
                items:
                  type: object
                  properties:
                    FeatureNo: 
                      type: string
                    FeatureDescription:
                      type: string
              Image:
                type: string
                    
    doctor:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              DoctorId:
                type: integer
              FirstName:
                type: string
              MiddleName:
                type: string
              LastName:
                type: string
              DOB:
                type: string
              Gender:
                type: string
              BloodGroup:
                type: string
              ProfilePicUrl:
                type: string
              Mobile:
                type: string
              Email:
                type: string
              CurrentAddress:
                type: string
              CurrentCityId:
                type: integer
              CurrentStateId:
                type: integer
              CurrentCountryId:
                type: integer
              PermAddress:
                type: string
              PermCityId:
                type: integer
              PermStateId:
                type: integer
              PermCountryId:
                type: integer
              CurrentZip:
                type: string
              PermZip:
                type: string
              EducationDetails:
                type: array
                items:
                  properties:
                    Degree:
                      type: string
                    Institute:
                      type: string
                    PassingYear:
                      type: string
             
              RegistrationNo:
                type: string
              IdentityType:
                type: integer
              IdentityNumber: 
                type: string
              IdentityProof:
                type: string
              Package:
                type: array
                items:
                  properties:
                    Name:
                      type: string
                    Id:
                      type: string
              CreateBy:
                type: integer
              CreateDate:
                type: string
              CreateIpAddress:
                type: string
              UpdateBy:
                type: integer
              UpdateDate:
                type: string
              UpdateIpAddress:
                type: string
              IsActive:
                type: integer
              ClinicId:
                type: array
                items:
                  properties:
                    ClinicId:
                      type: integer
              ConsultationCharge:
                type: integer
              SpecialityId: 
                type: integer
                  
              
    clinic:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              DoctorId:
                type: string
              ClinicName:
                type: string
              RegistrationNo:
                type: string
              EmailId:
                type: string
              PhoneNumber:
                type: string
              ClinicType:
                type: string
              YearOfPractice:
                type: string
              AssociatedFacilities:
                type: string
              CurrentAddress:
                type: string
              CurrentCityId:
                type: string
              CurrentStateId:
                type: string
              CurrentCountryId:
                type: string
              PermAddress:
                type: string
              PermCityId:
                type: string
              PermStateId:
                type: string
              PermCountryId:
                type: string
              CurrentZip:
                type: string
                
              
              
    FAQs:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              Topic:
                type: string
              Question:
                type: string
              Answer:
                type: string
    enquiry:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              EmailId:
                type: string
              Name:
                type: string
              Enquiry For:
                type: string
    appointment:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              ClinicId:
                type: string
              DoctorId:
                type: string
              PatientId:
                type: string
              Date:
                type: string
              TimeSlot:
                type: string
              AppointmentStatus:
                type: string
              ConsultationStatus:
                type: string
              ConsultationNumber:
                type: string
              Symptoms:
                type: array
                items:
                  type: object
                  properties:
                    SymptomId:
                      type: string
              Subsymptoms:
                type: array
                items:
                   type: object
                   properties:
                      SubSymptomName:
                        type: string
              Intensity:
                type: string
              Reports:
                type: array
                items:
                  type: object
                  properties:
                     ReportsImgUrl:
                        type: string
              ConsultationMode:
                type: string
              DaysOfSymptoms:
                type: string
                
    closedappointment:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              PatientId:
                type: string
              PatientName:
                type: string
              Condition:
                type: string
              Date:
                type: string
              Time:
                type: string
              Description:
                type: string
              Action:
                type: string
    cancelledappointment:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              PatientId:
                type: string
              PatientName:
                type: string
              Reason:
                type: string
    
    patient:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              PatientId:
                type: string
              Name: 
                type: string
              EmailId:
                 type: string
              Gender:
                 type: string
              Address:
                 type: string
              Phone:
                 type: string
              BloodGroup:
                 type: string
              StateId:
                 type: string
              CityId:
                 type: string
              CountryId:
                 type: string
              ZipCode:
                 type: string
              
    payment:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              PatientId:
                type: string
              PatientName:
                type: string
              Date:
                type: string
              Time:
                type: string
              Charges:
                type: string
              Detail:
                type: string
              Quantity:
                type: string
              UnitCost:
                type: string
              Discount:
                type: string
              Total:
                type: string
        
    emr:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              PatientName:
                type: string
              ConsultedTo:
                type: string
              Gender:
                type: string
              Age:
                type: string
              Symptoms:
                type: string
              Findings:
                type: string
              Diagnosis:
                type: string
              Instruction:
                type: string
              FollowUp:
                type: string
              Prescription:
                type: string
              EMRGenerated:
                type: string
              Concern:
                type: string
              InvoiceGenerated:
                type: string
    
            
    
    symptom:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
             Symptom:
               type: string
             SymptomId:
               type: string
            
            
    subsymptom:
      type: object
      properties:
        message:
          type: string
        status: 
          type: string
        data: 
          type: array
          items:
            type: object
            properties:
              SymptomId: 
                type: string
        SubSymptomName:
          type: string
          
    dashboard:
        type: object
        properties:
          message:
            type: string
          status:
            type: string
          data:
            type: array
            items:
              type: object
              properties:
                PatientId:
                  type: string
                Condition: 
                  type: string
                Severity:
                  type: string
                PatientName:
                  type: string
                Doctor: 
                  type: string
                ConsultationMode:
                  type: string
                Date:
                  type: string
                Charges:
                  type: string
                Status:
                  type: string
        
    
        
               
    errormodel:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
